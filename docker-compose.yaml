services:
  main:
    # Имя контейнера для основного приложения
    container_name: py_main

    build:
      # Указываем контекст сборки (текущая директория)
      context: .
      # Dockerfile, который используется для сборки образа
      dockerfile: Dockerfile.main

    ports:
      # Пробрасываем порты: внешний ${MAIN_PORT} связываем с портом 8000 внутри контейнера
      - "${MAIN_PORT}:8000"

    depends_on:
      # Указываем зависимость от сервиса базы данных
      - database
      
    volumes:
      # Монтируем текущую директорию на /app внутри контейнера
      - .:/app
      # Хранилище для обложек книг
      - ./covers_storage:/code/static/covers
      # Хранилище данных
      - ./data_storage:/code/data

    # Перезапускаем контейнер автоматически при сбоях
    restart: always

    # Подключаем файл с переменными окружения
    env_file:
      - .env

    networks:
      # Подключаем к пользовательской сети soap-network
      - soap-network

    # Проверка состояния сервиса
    healthcheck:
      # Команда curl проверяет доступность порта 8000
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      # Интервал между проверками - 10 секунд
      interval: 10s
      # Таймаут команды - 5 секунд
      timeout: 5s
      # Количество попыток перед фатальным статусом
      retries: 5
 
  database:
    # Имя контейнера для базы данных
    container_name: py_database

    build:
      # Контекст сборки
      context: .
      # Dockerfile для сборки базы данных
      dockerfile: Dockerfile.database

    volumes:
      # Общий монтируемый каталог для приложений
      - .:/app
      # Хранилище для обложек книг
      - ./covers_storage:/code/static/covers
      # Хранилище данных
      - ./data_storage:/code/data

    ports:
      # Пробрасываем порты: внешний ${DB_SERVER_PORT} связываем с портом 8001 внутри контейнера
      - "${DB_SERVER_PORT}:8001"
    # Автоматический перезапуск контейнера при сбоях

    restart: always

    env_file:
      # Подключаем файл с переменными окружения
      - .env

    networks:
      # Подключаем к пользовательской сети soap-network
      - soap-network
      
    healthcheck:
      # Проверка поднятия сервиса базы данных
      # Команда curl проверяет доступность порта 8001
      test: ["CMD", "curl", "-f", "http://localhost:8001"]
      # Интервал между проверками - 10 секунд
      interval: 10s
      # Таймаут команды - 5 секунд
      timeout: 5s
      # Количество попыток перед фатальным статусом
      retries: 5
        
  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    depends_on:
      - main
    networks:
      - soap-network

# Определяем именованные тома для хранения данных
volumes:
  # Том для обложек книг
  static_covers:
  # Том для хранения данных
  data_storage:

# Определяем пользовательскую сеть для взаимодействия контейнеров
networks:
  soap-network:
    # Тип сети: bridge (по умолчанию)
    driver: bridge